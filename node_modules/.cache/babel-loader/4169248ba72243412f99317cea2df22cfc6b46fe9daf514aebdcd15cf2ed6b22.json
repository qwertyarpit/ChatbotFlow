{"ast":null,"code":"var _jsxFileName = \"D:\\\\XXXX\\\\src\\\\components\\\\SettingsPanel.js\";\nimport React from \"react\";\n\n/**\r\n * SettingsPanel component - displays when a node is selected\r\n * Shows node-specific properties and allows editing\r\n * Currently supports Text Node editing, but designed to be extensible\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsPanel = ({\n  selectedNode,\n  onNodeUpdate,\n  onClose\n}) => {\n  var _selectedNode$data, _selectedNode$data2, _selectedNode$data3;\n  // If no node is selected, don't render anything\n  if (!selectedNode) {\n    return null;\n  }\n\n  // Handle text change for text nodes\n  const handleTextChange = event => {\n    const newText = event.target.value;\n    onNodeUpdate(selectedNode.id, {\n      text: newText\n    });\n  };\n\n  // Handle image URL change for image nodes\n  const handleImageUrlChange = event => {\n    const newImageUrl = event.target.value;\n    onNodeUpdate(selectedNode.id, {\n      imageUrl: newImageUrl\n    });\n  };\n\n  // Handle caption change for image nodes\n  const handleCaptionChange = event => {\n    const newCaption = event.target.value;\n    onNodeUpdate(selectedNode.id, {\n      caption: newCaption\n    });\n  };\n\n  // Handle going back to nodes panel\n  const handleBack = () => {\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"settings-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBack,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"settings-panel-title\",\n        children: selectedNode.type === \"textNode\" ? \"Message\" : selectedNode.type === \"imageNode\" ? \"Image\" : \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-panel-content\",\n      children: [selectedNode.type === \"textNode\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"settings-textarea\",\n          value: ((_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.text) || \"\",\n          onChange: handleTextChange,\n          placeholder: \"Enter your message...\",\n          rows: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), selectedNode.type === \"imageNode\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Image URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"settings-input\",\n          type: \"url\",\n          value: ((_selectedNode$data2 = selectedNode.data) === null || _selectedNode$data2 === void 0 ? void 0 : _selectedNode$data2.imageUrl) || \"\",\n          onChange: handleImageUrlChange,\n          placeholder: \"https://example.com/image.jpg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Caption\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"settings-textarea\",\n          value: ((_selectedNode$data3 = selectedNode.data) === null || _selectedNode$data3 === void 0 ? void 0 : _selectedNode$data3.caption) || \"\",\n          onChange: handleCaptionChange,\n          placeholder: \"Enter image caption...\",\n          rows: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c = SettingsPanel;\nexport default SettingsPanel;\nvar _c;\n$RefreshReg$(_c, \"SettingsPanel\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SettingsPanel","selectedNode","onNodeUpdate","onClose","_selectedNode$data","_selectedNode$data2","_selectedNode$data3","handleTextChange","event","newText","target","value","id","text","handleImageUrlChange","newImageUrl","imageUrl","handleCaptionChange","newCaption","caption","handleBack","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","data","onChange","placeholder","rows","_c","$RefreshReg$"],"sources":["D:/XXXX/src/components/SettingsPanel.js"],"sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * SettingsPanel component - displays when a node is selected\r\n * Shows node-specific properties and allows editing\r\n * Currently supports Text Node editing, but designed to be extensible\r\n */\r\nconst SettingsPanel = ({ selectedNode, onNodeUpdate, onClose }) => {\r\n  // If no node is selected, don't render anything\r\n  if (!selectedNode) {\r\n    return null;\r\n  }\r\n\r\n  // Handle text change for text nodes\r\n  const handleTextChange = (event) => {\r\n    const newText = event.target.value;\r\n    onNodeUpdate(selectedNode.id, { text: newText });\r\n  };\r\n\r\n  // Handle image URL change for image nodes\r\n  const handleImageUrlChange = (event) => {\r\n    const newImageUrl = event.target.value;\r\n    onNodeUpdate(selectedNode.id, { imageUrl: newImageUrl });\r\n  };\r\n\r\n  // Handle caption change for image nodes\r\n  const handleCaptionChange = (event) => {\r\n    const newCaption = event.target.value;\r\n    onNodeUpdate(selectedNode.id, { caption: newCaption });\r\n  };\r\n\r\n  // Handle going back to nodes panel\r\n  const handleBack = () => {\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-panel\">\r\n      {/* Header with back button and node type */}\r\n      <div className=\"settings-panel-header\">\r\n        <button className=\"back-button\" onClick={handleBack}>\r\n          ‚Üê\r\n        </button>\r\n        <h3 className=\"settings-panel-title\">\r\n          {selectedNode.type === \"textNode\"\r\n            ? \"Message\"\r\n            : selectedNode.type === \"imageNode\"\r\n            ? \"Image\"\r\n            : \"Settings\"}\r\n        </h3>\r\n      </div>\r\n\r\n      {/* Settings content based on node type */}\r\n      <div className=\"settings-panel-content\">\r\n        {selectedNode.type === \"textNode\" && (\r\n          <div className=\"text-settings\">\r\n            <label className=\"settings-label\">Text</label>\r\n            <textarea\r\n              className=\"settings-textarea\"\r\n              value={selectedNode.data?.text || \"\"}\r\n              onChange={handleTextChange}\r\n              placeholder=\"Enter your message...\"\r\n              rows={4}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {selectedNode.type === \"imageNode\" && (\r\n          <div className=\"image-settings\">\r\n            <label className=\"settings-label\">Image URL</label>\r\n            <input\r\n              className=\"settings-input\"\r\n              type=\"url\"\r\n              value={selectedNode.data?.imageUrl || \"\"}\r\n              onChange={handleImageUrlChange}\r\n              placeholder=\"https://example.com/image.jpg\"\r\n            />\r\n\r\n            <label className=\"settings-label\">Caption</label>\r\n            <textarea\r\n              className=\"settings-textarea\"\r\n              value={selectedNode.data?.caption || \"\"}\r\n              onChange={handleCaptionChange}\r\n              placeholder=\"Enter image caption...\"\r\n              rows={3}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Future node types can be handled here:\r\n        {selectedNode.type === 'conditionNode' && (\r\n          <div className=\"condition-settings\">\r\n            <label className=\"settings-label\">Condition</label>\r\n            <input\r\n              className=\"settings-input\"\r\n              value={selectedNode.data?.condition || ''}\r\n              onChange={(e) => onNodeUpdate(selectedNode.id, { condition: e.target.value })}\r\n              placeholder=\"Enter condition...\"\r\n            />\r\n          </div>\r\n        )}\r\n        */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}