{"ast":null,"code":"import _objectSpread from\"D:/XXXX/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useCallback,useRef}from\"react\";import ReactFlow,{MiniMap,Controls,Background,useNodesState,useEdgesState,addEdge,ReactFlowProvider}from\"reactflow\";import\"reactflow/dist/style.css\";import TextNode from\"./TextNode\";import NodesPanel from\"./NodesPanel\";import SettingsPanel from\"./SettingsPanel\";// custom node types\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const nodeTypes={textNode:TextNode};const FlowContent=()=>{// State management\nconst[nodes,setNodes,onNodesChange]=useNodesState([]);const[edges,setEdges,onEdgesChange]=useEdgesState([]);const[selectedNode,setSelectedNode]=useState(null);const[showSettings,setShowSettings]=useState(false);const[errorMessage,setErrorMessage]=useState(\"\");const[nodeIdCounter,setNodeIdCounter]=useState(0);const reactFlowWrapper=useRef(null);// Handle node selection\nconst onNodeClick=useCallback((event,node)=>{setSelectedNode(node);setShowSettings(true);setErrorMessage(\"\");// Clear any previous errors messagaes\n},[]);// edge connections\nconst onConnect=useCallback(params=>{setEdges(eds=>addEdge(params,eds));},[setEdges]);//  drag start from nodes panel\nconst onDragStart=useCallback((event,nodeType)=>{event.dataTransfer.setData(\"application/reactflow\",nodeType);event.dataTransfer.effectAllowed=\"move\";},[]);// Handle drag over on flow area\nconst onDragOver=useCallback(event=>{event.preventDefault();event.dataTransfer.dropEffect=\"move\";},[]);// Handle drop of new nodes\nconst onDrop=useCallback(event=>{event.preventDefault();const reactFlowBounds=reactFlowWrapper.current.getBoundingClientRect();const type=event.dataTransfer.getData(\"application/reactflow\");// Calculate position of  relative to the flow area\nconst position={x:event.clientX-reactFlowBounds.left,y:event.clientY-reactFlowBounds.top};// Create new node based on type\nconst newNode={id:\"node-\".concat(nodeIdCounter),type:type,position,data:{text:\"New \".concat(type===\"textNode\"?\"message\":\"node\")}};setNodes(nds=>nds.concat(newNode));setNodeIdCounter(counter=>counter+1);},[nodeIdCounter,setNodes]);// Update node data\nconst onNodeUpdate=useCallback((nodeId,newData)=>{setNodes(nds=>nds.map(node=>node.id===nodeId?_objectSpread(_objectSpread({},node),{},{data:_objectSpread(_objectSpread({},node.data),newData)}):node));// Update selected node if this is the  one being edited\nif(selectedNode&&selectedNode.id===nodeId){setSelectedNode(prev=>_objectSpread(_objectSpread({},prev),{},{data:_objectSpread(_objectSpread({},prev.data),newData)}));}},[setNodes,selectedNode]);// Close settings panel\nconst onCloseSettings=useCallback(()=>{setShowSettings(false);setSelectedNode(null);},[]);// Delete node buton\nconst onDeleteNode=useCallback(nodeId=>{// Remove the node\nsetNodes(nds=>nds.filter(node=>node.id!==nodeId));// Remove edges connected to this node\nsetEdges(eds=>eds.filter(edge=>edge.source!==nodeId&&edge.target!==nodeId));},[setNodes,setEdges]);// Validate flow before saving\nconst validateFlow=useCallback(()=>{if(nodes.length<=1){return true;// Single node or no nodes is valid\n}// Check if more than one node has empty target handles\nconst nodesWithEmptyTargets=nodes.filter(node=>{const hasIncomingEdges=edges.some(edge=>edge.target===node.id);return!hasIncomingEdges;});return nodesWithEmptyTargets.length<=1;// Only one node can have empty target (the start node)\n},[nodes,edges]);// Save flow\nconst onSave=useCallback(()=>{if(!validateFlow()){setErrorMessage(\"Cannot save Flow\");return;}setErrorMessage(\"\");// Here you would typically save to a backend or local storage\nconsole.log(\"Flow saved successfully!\",{nodes,edges});alert(\"Flow saved successfully!\");},[validateFlow,nodes,edges]);return/*#__PURE__*/_jsxs(\"div\",{className:\"flow-builder\",children:[errorMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"error-banner\",children:errorMessage}),/*#__PURE__*/_jsx(\"div\",{className:\"flow-header\",children:/*#__PURE__*/_jsx(\"button\",{className:\"save-button\",onClick:onSave,children:\"Save Changes\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"flow-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flow-canvas\",ref:reactFlowWrapper,children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,onNodesChange:onNodesChange,onEdgesChange:onEdgesChange,onConnect:onConnect,onNodeClick:onNodeClick,onDrop:onDrop,onDragOver:onDragOver,nodeTypes:nodeTypes,fitView:true,children:[/*#__PURE__*/_jsx(Controls,{}),/*#__PURE__*/_jsx(MiniMap,{}),/*#__PURE__*/_jsx(Background,{variant:\"dots\",gap:12,size:1})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"right-panel\",children:showSettings?/*#__PURE__*/_jsx(SettingsPanel,{selectedNode:selectedNode,onNodeUpdate:onNodeUpdate,onClose:onCloseSettings,onDeleteNode:onDeleteNode}):/*#__PURE__*/_jsx(NodesPanel,{onDragStart:onDragStart})})]})]});};/**\r\n * FlowBuilder component\r\n * required for React Flow to work properly\r\n */const FlowBuilder=()=>{return/*#__PURE__*/_jsx(ReactFlowProvider,{children:/*#__PURE__*/_jsx(FlowContent,{})});};export default FlowBuilder;","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","ReactFlowProvider","TextNode","NodesPanel","SettingsPanel","jsx","_jsx","jsxs","_jsxs","nodeTypes","textNode","FlowContent","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","showSettings","setShowSettings","errorMessage","setErrorMessage","nodeIdCounter","setNodeIdCounter","reactFlowWrapper","onNodeClick","event","node","onConnect","params","eds","onDragStart","nodeType","dataTransfer","setData","effectAllowed","onDragOver","preventDefault","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","type","getData","position","x","clientX","left","y","clientY","top","newNode","id","concat","data","text","nds","counter","onNodeUpdate","nodeId","newData","map","_objectSpread","prev","onCloseSettings","onDeleteNode","filter","edge","source","target","validateFlow","length","nodesWithEmptyTargets","hasIncomingEdges","some","onSave","console","log","alert","className","children","onClick","ref","fitView","variant","gap","size","onClose","FlowBuilder"],"sources":["D:/XXXX/src/components/FlowBuilder.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport ReactFlow, {\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n  ReactFlowProvider,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nimport TextNode from \"./TextNode\";\r\nimport NodesPanel from \"./NodesPanel\";\r\nimport SettingsPanel from \"./SettingsPanel\";\r\n\r\n// custom node types\r\nconst nodeTypes = {\r\n  textNode: TextNode,\r\n};\r\n\r\n\r\nconst FlowContent = () => {\r\n  // State management\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [nodeIdCounter, setNodeIdCounter] = useState(0);\r\n\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n  // Handle node selection\r\n  const onNodeClick = useCallback((event, node) => {\r\n    setSelectedNode(node);\r\n    setShowSettings(true);\r\n    setErrorMessage(\"\"); // Clear any previous errors messagaes\r\n  }, []);\r\n\r\n  // edge connections\r\n  const onConnect = useCallback(\r\n    (params) => {\r\n      setEdges((eds) => addEdge(params, eds));\r\n    },\r\n    [setEdges]\r\n  );\r\n\r\n  //  drag start from nodes panel\r\n  const onDragStart = useCallback((event, nodeType) => {\r\n    event.dataTransfer.setData(\"application/reactflow\", nodeType);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n  }, []);\r\n\r\n  // Handle drag over on flow area\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  }, []);\r\n\r\n  // Handle drop of new nodes\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData(\"application/reactflow\");\r\n\r\n      // Calculate position of  relative to the flow area\r\n      const position = {\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      };\r\n\r\n      // Create new node based on type\r\n      const newNode = {\r\n        id: `node-${nodeIdCounter}`,\r\n        type: type,\r\n        position,\r\n        data: { text: `New ${type === \"textNode\" ? \"message\" : \"node\"}` },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n      setNodeIdCounter((counter) => counter + 1);\r\n    },\r\n    [nodeIdCounter, setNodes]\r\n  );\r\n\r\n  // Update node data\r\n  const onNodeUpdate = useCallback(\r\n    (nodeId, newData) => {\r\n      setNodes((nds) =>\r\n        nds.map((node) =>\r\n          node.id === nodeId\r\n            ? { ...node, data: { ...node.data, ...newData } }\r\n            : node\r\n        )\r\n      );\r\n\r\n      // Update selected node if this is the  one being edited\r\n      if (selectedNode && selectedNode.id === nodeId) {\r\n        setSelectedNode((prev) => ({\r\n          ...prev,\r\n          data: { ...prev.data, ...newData },\r\n        }));\r\n      }\r\n    },\r\n    [setNodes, selectedNode]\r\n  );\r\n\r\n  // Close settings panel\r\n  const onCloseSettings = useCallback(() => {\r\n    setShowSettings(false);\r\n    setSelectedNode(null);\r\n  }, []);\r\n\r\n  // Delete node buton\r\n  const onDeleteNode = useCallback(\r\n    (nodeId) => {\r\n      // Remove the node\r\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\r\n\r\n      // Remove edges connected to this node\r\n      setEdges((eds) =>\r\n        eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\r\n      );\r\n    },\r\n    [setNodes, setEdges]\r\n  );\r\n\r\n  // Validate flow before saving\r\n  const validateFlow = useCallback(() => {\r\n    if (nodes.length <= 1) {\r\n      return true; // Single node or no nodes is valid\r\n    }\r\n\r\n    // Check if more than one node has empty target handles\r\n    const nodesWithEmptyTargets = nodes.filter((node) => {\r\n      const hasIncomingEdges = edges.some((edge) => edge.target === node.id);\r\n      return !hasIncomingEdges;\r\n    });\r\n\r\n    return nodesWithEmptyTargets.length <= 1; // Only one node can have empty target (the start node)\r\n  }, [nodes, edges]);\r\n\r\n  // Save flow\r\n  const onSave = useCallback(() => {\r\n    if (!validateFlow()) {\r\n      setErrorMessage(\"Cannot save Flow\");\r\n      return;\r\n    }\r\n\r\n    setErrorMessage(\"\");\r\n    // Here you would typically save to a backend or local storage\r\n    console.log(\"Flow saved successfully!\", { nodes, edges });\r\n    alert(\"Flow saved successfully!\");\r\n  }, [validateFlow, nodes, edges]);\r\n\r\n  return (\r\n    <div className=\"flow-builder\">\r\n      {/* Error message banner */}\r\n      {errorMessage && <div className=\"error-banner\">{errorMessage}</div>}\r\n\r\n      {/* Header with save button */}\r\n      <div className=\"flow-header\">\r\n        <button className=\"save-button\" onClick={onSave}>\r\n          Save Changes\r\n        </button>\r\n      </div>\r\n\r\n      {/* Main flow area */}\r\n      <div className=\"flow-content\">\r\n        <div className=\"flow-canvas\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            nodes={nodes}\r\n            edges={edges}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            onNodeClick={onNodeClick}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            nodeTypes={nodeTypes}\r\n            fitView>\r\n            <Controls />\r\n            <MiniMap />\r\n            <Background variant=\"dots\" gap={12} size={1} />\r\n          </ReactFlow>\r\n        </div>\r\n\r\n        {/* Right panel - either nodes panel or settings panel */}\r\n        <div className=\"right-panel\">\r\n          {showSettings ? (\r\n            <SettingsPanel\r\n              selectedNode={selectedNode}\r\n              onNodeUpdate={onNodeUpdate}\r\n              onClose={onCloseSettings}\r\n              onDeleteNode={onDeleteNode}\r\n            />\r\n          ) : (\r\n            <NodesPanel onDragStart={onDragStart} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * FlowBuilder component\r\n * required for React Flow to work properly\r\n */\r\nconst FlowBuilder = () => {\r\n  return (\r\n    <ReactFlowProvider>\r\n      <FlowContent />\r\n    </ReactFlowProvider>\r\n  );\r\n};\r\n\r\nexport default FlowBuilder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}