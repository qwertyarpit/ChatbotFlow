{"ast":null,"code":"var _jsxFileName = \"D:\\\\XXXX\\\\src\\\\components\\\\NodesPanel.js\";\nimport React from 'react';\n\n/**\r\n * NodeType component represents a draggable node type in the nodes panel\r\n * This makes it easy to add new node types in the future\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NodeType = ({\n  type,\n  label,\n  icon,\n  onDragStart\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-type\",\n    draggable: true,\n    onDragStart: e => onDragStart(e, type),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-type-icon\",\n      children: icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-type-label\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * NodesPanel component - extensible panel for all available node types\r\n * Currently supports Message nodes, but designed to easily add more types\r\n */\n_c = NodeType;\nconst NodesPanel = ({\n  onDragStart\n}) => {\n  // Define all available node types - easily extensible\n  const nodeTypes = [{\n    type: 'textNode',\n    label: 'Text Message',\n    icon: 'üí¨'\n  }\n  // Future node types can be added here:\n  // {\n  //   type: 'conditionNode',\n  //   label: 'Condition',\n  //   icon: '‚ùì'\n  // },\n  // {\n  //   type: 'apiNode',\n  //   label: 'API Call',\n  //   icon: 'üîó'\n  // }\n  ];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nodes-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"nodes-panel-title\",\n      children: \"Nodes Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nodes-panel-content\",\n      children: nodeTypes.map(nodeType => /*#__PURE__*/_jsxDEV(NodeType, {\n        type: nodeType.type,\n        label: nodeType.label,\n        icon: nodeType.icon,\n        onDragStart: onDragStart\n      }, nodeType.type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c2 = NodesPanel;\nexport default NodesPanel;\nvar _c, _c2;\n$RefreshReg$(_c, \"NodeType\");\n$RefreshReg$(_c2, \"NodesPanel\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","NodeType","type","label","icon","onDragStart","className","draggable","e","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","NodesPanel","nodeTypes","map","nodeType","_c2","$RefreshReg$"],"sources":["D:/XXXX/src/components/NodesPanel.js"],"sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * NodeType component represents a draggable node type in the nodes panel\r\n * This makes it easy to add new node types in the future\r\n */\r\nconst NodeType = ({ type, label, icon, onDragStart }) => {\r\n  return (\r\n    <div\r\n      className=\"node-type\"\r\n      draggable\r\n      onDragStart={(e) => onDragStart(e, type)}\r\n    >\r\n      <div className=\"node-type-icon\">{icon}</div>\r\n      <div className=\"node-type-label\">{label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * NodesPanel component - extensible panel for all available node types\r\n * Currently supports Message nodes, but designed to easily add more types\r\n */\r\nconst NodesPanel = ({ onDragStart }) => {\r\n  // Define all available node types - easily extensible\r\n  const nodeTypes = [\r\n    {\r\n      type: 'textNode',\r\n      label: 'Text Message',\r\n      icon: 'üí¨'\r\n    }\r\n    // Future node types can be added here:\r\n    // {\r\n    //   type: 'conditionNode',\r\n    //   label: 'Condition',\r\n    //   icon: '‚ùì'\r\n    // },\r\n    // {\r\n    //   type: 'apiNode',\r\n    //   label: 'API Call',\r\n    //   icon: 'üîó'\r\n    // }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"nodes-panel\">\r\n      <h3 className=\"nodes-panel-title\">Nodes Panel</h3>\r\n      <div className=\"nodes-panel-content\">\r\n        {nodeTypes.map((nodeType) => (\r\n          <NodeType\r\n            key={nodeType.type}\r\n            type={nodeType.type}\r\n            label={nodeType.label}\r\n            icon={nodeType.icon}\r\n            onDragStart={onDragStart}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodesPanel;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC,IAAI;EAAEC;AAAY,CAAC,KAAK;EACvD,oBACEL,OAAA;IACEM,SAAS,EAAC,WAAW;IACrBC,SAAS;IACTF,WAAW,EAAGG,CAAC,IAAKH,WAAW,CAACG,CAAC,EAAEN,IAAI,CAAE;IAAAO,QAAA,gBAEzCT,OAAA;MAAKM,SAAS,EAAC,gBAAgB;MAAAG,QAAA,EAAEL;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC5Cb,OAAA;MAAKM,SAAS,EAAC,iBAAiB;MAAAG,QAAA,EAAEN;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AAHAC,EAAA,GAbMb,QAAQ;AAiBd,MAAMc,UAAU,GAAGA,CAAC;EAAEV;AAAY,CAAC,KAAK;EACtC;EACA,MAAMW,SAAS,GAAG,CAChB;IACEd,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE,cAAc;IACrBC,IAAI,EAAE;EACR;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA,CACD;EAED,oBACEJ,OAAA;IAAKM,SAAS,EAAC,aAAa;IAAAG,QAAA,gBAC1BT,OAAA;MAAIM,SAAS,EAAC,mBAAmB;MAAAG,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClDb,OAAA;MAAKM,SAAS,EAAC,qBAAqB;MAAAG,QAAA,EACjCO,SAAS,CAACC,GAAG,CAAEC,QAAQ,iBACtBlB,OAAA,CAACC,QAAQ;QAEPC,IAAI,EAAEgB,QAAQ,CAAChB,IAAK;QACpBC,KAAK,EAAEe,QAAQ,CAACf,KAAM;QACtBC,IAAI,EAAEc,QAAQ,CAACd,IAAK;QACpBC,WAAW,EAAEA;MAAY,GAJpBa,QAAQ,CAAChB,IAAI;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKnB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACM,GAAA,GArCIJ,UAAU;AAuChB,eAAeA,UAAU;AAAC,IAAAD,EAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}