{"ast":null,"code":"var _jsxFileName = \"D:\\\\XXXX\\\\src\\\\components\\\\FlowBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport TextNode from './TextNode';\nimport NodesPanel from './NodesPanel';\nimport SettingsPanel from './SettingsPanel';\n\n// Define custom node types for React Flow\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  textNode: TextNode\n};\n\n/**\r\n * FlowBuilder component - main component that orchestrates the flow builder\r\n * Features:\r\n * - Drag and drop nodes from panel\r\n * - Connect nodes with edges\r\n * - Edit node properties in settings panel\r\n * - Save flow with validation\r\n */\nconst FlowBuilder = () => {\n  _s();\n  // State management\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [showSettings, setShowSettings] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [nodeIdCounter, setNodeIdCounter] = useState(0);\n  const reactFlowWrapper = useRef(null);\n  const {\n    project\n  } = useReactFlow();\n\n  // Handle node selection\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n    setShowSettings(true);\n    setErrorMessage(''); // Clear any previous errors\n  }, []);\n\n  // Handle edge connections\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, [setEdges]);\n\n  // Handle drag start from nodes panel\n  const onDragStart = useCallback((event, nodeType) => {\n    event.dataTransfer.setData('application/reactflow', nodeType);\n    event.dataTransfer.effectAllowed = 'move';\n  }, []);\n\n  // Handle drag over on flow area\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  // Handle drop of new nodes\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    // Calculate position relative to the flow area\n    const position = project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n\n    // Create new node based on type\n    const newNode = {\n      id: `node-${nodeIdCounter}`,\n      type: type,\n      position,\n      data: {\n        text: `New ${type === 'textNode' ? 'message' : 'node'}`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n    setNodeIdCounter(counter => counter + 1);\n  }, [project, nodeIdCounter, setNodes]);\n\n  // Update node data\n  const onNodeUpdate = useCallback((nodeId, newData) => {\n    setNodes(nds => nds.map(node => node.id === nodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        ...newData\n      }\n    } : node));\n\n    // Update selected node if it's the one being edited\n    if (selectedNode && selectedNode.id === nodeId) {\n      setSelectedNode(prev => ({\n        ...prev,\n        data: {\n          ...prev.data,\n          ...newData\n        }\n      }));\n    }\n  }, [setNodes, selectedNode]);\n\n  // Close settings panel\n  const onCloseSettings = useCallback(() => {\n    setShowSettings(false);\n    setSelectedNode(null);\n  }, []);\n\n  // Validate flow before saving\n  const validateFlow = useCallback(() => {\n    if (nodes.length <= 1) {\n      return true; // Single node or no nodes is valid\n    }\n\n    // Check if more than one node has empty target handles\n    const nodesWithEmptyTargets = nodes.filter(node => {\n      const hasIncomingEdges = edges.some(edge => edge.target === node.id);\n      return !hasIncomingEdges;\n    });\n    return nodesWithEmptyTargets.length <= 1; // Only one node can have empty target (the start node)\n  }, [nodes, edges]);\n\n  // Save flow\n  const onSave = useCallback(() => {\n    if (!validateFlow()) {\n      setErrorMessage('Cannot save Flow');\n      return;\n    }\n    setErrorMessage('');\n    // Here you would typically save to a backend or local storage\n    console.log('Flow saved successfully!', {\n      nodes,\n      edges\n    });\n    alert('Flow saved successfully!');\n  }, [validateFlow, nodes, edges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-builder\",\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-banner\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flow-header\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: onSave,\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flow-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flow-canvas\",\n        ref: reactFlowWrapper,\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onNodeClick: onNodeClick,\n          onDrop: onDrop,\n          onDragOver: onDragOver,\n          nodeTypes: nodeTypes,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Background, {\n            variant: \"dots\",\n            gap: 12,\n            size: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: showSettings ? /*#__PURE__*/_jsxDEV(SettingsPanel, {\n          selectedNode: selectedNode,\n          onNodeUpdate: onNodeUpdate,\n          onClose: onCloseSettings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(NodesPanel, {\n          onDragStart: onDragStart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(FlowBuilder, \"1+TWDF40KKdgPhhQ8bUHu/uuK3Y=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n});\n_c = FlowBuilder;\nexport default FlowBuilder;\nvar _c;\n$RefreshReg$(_c, \"FlowBuilder\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","useReactFlow","TextNode","NodesPanel","SettingsPanel","jsxDEV","_jsxDEV","nodeTypes","textNode","FlowBuilder","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","showSettings","setShowSettings","errorMessage","setErrorMessage","nodeIdCounter","setNodeIdCounter","reactFlowWrapper","project","onNodeClick","event","node","onConnect","params","eds","onDragStart","nodeType","dataTransfer","setData","effectAllowed","onDragOver","preventDefault","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","type","getData","position","x","clientX","left","y","clientY","top","newNode","id","data","text","nds","concat","counter","onNodeUpdate","nodeId","newData","map","prev","onCloseSettings","validateFlow","length","nodesWithEmptyTargets","filter","hasIncomingEdges","some","edge","target","onSave","console","log","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","fitView","variant","gap","size","onClose","_c","$RefreshReg$"],"sources":["D:/XXXX/src/components/FlowBuilder.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport ReactFlow, {\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n  useReactFlow,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\nimport TextNode from './TextNode';\r\nimport NodesPanel from './NodesPanel';\r\nimport SettingsPanel from './SettingsPanel';\r\n\r\n// Define custom node types for React Flow\r\nconst nodeTypes = {\r\n  textNode: TextNode,\r\n};\r\n\r\n/**\r\n * FlowBuilder component - main component that orchestrates the flow builder\r\n * Features:\r\n * - Drag and drop nodes from panel\r\n * - Connect nodes with edges\r\n * - Edit node properties in settings panel\r\n * - Save flow with validation\r\n */\r\nconst FlowBuilder = () => {\r\n  // State management\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [nodeIdCounter, setNodeIdCounter] = useState(0);\r\n  \r\n  const reactFlowWrapper = useRef(null);\r\n  const { project } = useReactFlow();\r\n\r\n  // Handle node selection\r\n  const onNodeClick = useCallback((event, node) => {\r\n    setSelectedNode(node);\r\n    setShowSettings(true);\r\n    setErrorMessage(''); // Clear any previous errors\r\n  }, []);\r\n\r\n  // Handle edge connections\r\n  const onConnect = useCallback((params) => {\r\n    setEdges((eds) => addEdge(params, eds));\r\n  }, [setEdges]);\r\n\r\n  // Handle drag start from nodes panel\r\n  const onDragStart = useCallback((event, nodeType) => {\r\n    event.dataTransfer.setData('application/reactflow', nodeType);\r\n    event.dataTransfer.effectAllowed = 'move';\r\n  }, []);\r\n\r\n  // Handle drag over on flow area\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  // Handle drop of new nodes\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n      // Calculate position relative to the flow area\r\n      const position = project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n\r\n      // Create new node based on type\r\n      const newNode = {\r\n        id: `node-${nodeIdCounter}`,\r\n        type: type,\r\n        position,\r\n        data: { text: `New ${type === 'textNode' ? 'message' : 'node'}` },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n      setNodeIdCounter((counter) => counter + 1);\r\n    },\r\n    [project, nodeIdCounter, setNodes]\r\n  );\r\n\r\n  // Update node data\r\n  const onNodeUpdate = useCallback((nodeId, newData) => {\r\n    setNodes((nds) =>\r\n      nds.map((node) =>\r\n        node.id === nodeId ? { ...node, data: { ...node.data, ...newData } } : node\r\n      )\r\n    );\r\n    \r\n    // Update selected node if it's the one being edited\r\n    if (selectedNode && selectedNode.id === nodeId) {\r\n      setSelectedNode((prev) => ({ ...prev, data: { ...prev.data, ...newData } }));\r\n    }\r\n  }, [setNodes, selectedNode]);\r\n\r\n  // Close settings panel\r\n  const onCloseSettings = useCallback(() => {\r\n    setShowSettings(false);\r\n    setSelectedNode(null);\r\n  }, []);\r\n\r\n  // Validate flow before saving\r\n  const validateFlow = useCallback(() => {\r\n    if (nodes.length <= 1) {\r\n      return true; // Single node or no nodes is valid\r\n    }\r\n\r\n    // Check if more than one node has empty target handles\r\n    const nodesWithEmptyTargets = nodes.filter((node) => {\r\n      const hasIncomingEdges = edges.some((edge) => edge.target === node.id);\r\n      return !hasIncomingEdges;\r\n    });\r\n\r\n    return nodesWithEmptyTargets.length <= 1; // Only one node can have empty target (the start node)\r\n  }, [nodes, edges]);\r\n\r\n  // Save flow\r\n  const onSave = useCallback(() => {\r\n    if (!validateFlow()) {\r\n      setErrorMessage('Cannot save Flow');\r\n      return;\r\n    }\r\n\r\n    setErrorMessage('');\r\n    // Here you would typically save to a backend or local storage\r\n    console.log('Flow saved successfully!', { nodes, edges });\r\n    alert('Flow saved successfully!');\r\n  }, [validateFlow, nodes, edges]);\r\n\r\n  return (\r\n    <div className=\"flow-builder\">\r\n      {/* Error message banner */}\r\n      {errorMessage && (\r\n        <div className=\"error-banner\">\r\n          {errorMessage}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Header with save button */}\r\n      <div className=\"flow-header\">\r\n        <button className=\"save-button\" onClick={onSave}>\r\n          Save Changes\r\n        </button>\r\n      </div>\r\n\r\n      {/* Main flow area */}\r\n      <div className=\"flow-content\">\r\n        <div className=\"flow-canvas\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            nodes={nodes}\r\n            edges={edges}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            onNodeClick={onNodeClick}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            nodeTypes={nodeTypes}\r\n            fitView\r\n          >\r\n            <Controls />\r\n            <MiniMap />\r\n            <Background variant=\"dots\" gap={12} size={1} />\r\n          </ReactFlow>\r\n        </div>\r\n\r\n        {/* Right panel - either nodes panel or settings panel */}\r\n        <div className=\"right-panel\">\r\n          {showSettings ? (\r\n            <SettingsPanel\r\n              selectedNode={selectedNode}\r\n              onNodeUpdate={onNodeUpdate}\r\n              onClose={onCloseSettings}\r\n            />\r\n          ) : (\r\n            <NodesPanel onDragStart={onDragStart} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlowBuilder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}