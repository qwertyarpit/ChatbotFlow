{"ast":null,"code":"var _jsxFileName = \"D:\\\\XXXX\\\\src\\\\components\\\\SettingsPanel.js\";\nimport React from \"react\";\n\n/**\r\n * SettingsPanel component - displays when a node is selected\r\n * Shows node-specific properties and allows editing\r\n * Currently supports Text Node editing, but designed to be extensible\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsPanel = ({\n  selectedNode,\n  onNodeUpdate,\n  onClose\n}) => {\n  var _selectedNode$data;\n  // If no node is selected, don't render anything\n  if (!selectedNode) {\n    return null;\n  }\n\n  // Handle text change for text nodes\n  const handleTextChange = event => {\n    const newText = event.target.value;\n    onNodeUpdate(selectedNode.id, {\n      text: newText\n    });\n  };\n\n  // Handle going back to nodes panel\n  const handleBack = () => {\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"settings-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBack,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"settings-panel-title\",\n        children: \"Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-panel-content\",\n      children: selectedNode.type === \"textNode\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"settings-textarea\",\n          value: ((_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.text) || \"\",\n          onChange: handleTextChange,\n          placeholder: \"Enter your message...\",\n          rows: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c = SettingsPanel;\nexport default SettingsPanel;\nvar _c;\n$RefreshReg$(_c, \"SettingsPanel\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SettingsPanel","selectedNode","onNodeUpdate","onClose","_selectedNode$data","handleTextChange","event","newText","target","value","id","text","handleBack","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","data","onChange","placeholder","rows","_c","$RefreshReg$"],"sources":["D:/XXXX/src/components/SettingsPanel.js"],"sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * SettingsPanel component - displays when a node is selected\r\n * Shows node-specific properties and allows editing\r\n * Currently supports Text Node editing, but designed to be extensible\r\n */\r\nconst SettingsPanel = ({ selectedNode, onNodeUpdate, onClose }) => {\r\n  // If no node is selected, don't render anything\r\n  if (!selectedNode) {\r\n    return null;\r\n  }\r\n\r\n  // Handle text change for text nodes\r\n  const handleTextChange = (event) => {\r\n    const newText = event.target.value;\r\n    onNodeUpdate(selectedNode.id, { text: newText });\r\n  };\r\n\r\n  // Handle going back to nodes panel\r\n  const handleBack = () => {\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-panel\">\r\n      {/* Header with back button and node type */}\r\n      <div className=\"settings-panel-header\">\r\n        <button className=\"back-button\" onClick={handleBack}>\r\n          ‚Üê\r\n        </button>\r\n        <h3 className=\"settings-panel-title\">Message</h3>\r\n      </div>\r\n\r\n      {/* Settings content based on node type */}\r\n      <div className=\"settings-panel-content\">\r\n        {selectedNode.type === \"textNode\" && (\r\n          <div className=\"text-settings\">\r\n            <label className=\"settings-label\">Text</label>\r\n            <textarea\r\n              className=\"settings-textarea\"\r\n              value={selectedNode.data?.text || \"\"}\r\n              onChange={handleTextChange}\r\n              placeholder=\"Enter your message...\"\r\n              rows={4}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Future node types can be handled here:\r\n        {selectedNode.type === 'conditionNode' && (\r\n          <div className=\"condition-settings\">\r\n            <label className=\"settings-label\">Condition</label>\r\n            <input\r\n              className=\"settings-input\"\r\n              value={selectedNode.data?.condition || ''}\r\n              onChange={(e) => onNodeUpdate(selectedNode.id, { condition: e.target.value })}\r\n              placeholder=\"Enter condition...\"\r\n            />\r\n          </div>\r\n        )}\r\n        */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsPanel;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,aAAa,GAAGA,CAAC;EAAEC,YAAY;EAAEC,YAAY;EAAEC;AAAQ,CAAC,KAAK;EAAA,IAAAC,kBAAA;EACjE;EACA,IAAI,CAACH,YAAY,EAAE;IACjB,OAAO,IAAI;EACb;;EAEA;EACA,MAAMI,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IAClCP,YAAY,CAACD,YAAY,CAACS,EAAE,EAAE;MAAEC,IAAI,EAAEJ;IAAQ,CAAC,CAAC;EAClD,CAAC;;EAED;EACA,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACvBT,OAAO,CAAC,CAAC;EACX,CAAC;EAED,oBACEJ,OAAA;IAAKc,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAE7Bf,OAAA;MAAKc,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpCf,OAAA;QAAQc,SAAS,EAAC,aAAa;QAACE,OAAO,EAAEH,UAAW;QAAAE,QAAA,EAAC;MAErD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpB,OAAA;QAAIc,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eAGNpB,OAAA;MAAKc,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EACpCb,YAAY,CAACmB,IAAI,KAAK,UAAU,iBAC/BrB,OAAA;QAAKc,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5Bf,OAAA;UAAOc,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9CpB,OAAA;UACEc,SAAS,EAAC,mBAAmB;UAC7BJ,KAAK,EAAE,EAAAL,kBAAA,GAAAH,YAAY,CAACoB,IAAI,cAAAjB,kBAAA,uBAAjBA,kBAAA,CAAmBO,IAAI,KAAI,EAAG;UACrCW,QAAQ,EAAEjB,gBAAiB;UAC3BkB,WAAW,EAAC,uBAAuB;UACnCC,IAAI,EAAE;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAeE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACM,EAAA,GA1DIzB,aAAa;AA4DnB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}