{"ast":null,"code":"var _jsxFileName = \"D:\\\\XXXX\\\\src\\\\components\\\\NodesPanel.js\";\nimport React from \"react\";\n\n/**\r\n * NodeType component represents a draggable node type in the nodes panel\r\n * This makes it easy to add new node types in the future\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NodeType = ({\n  type,\n  label,\n  icon,\n  onDragStart,\n  onInsert\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-type-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-type\",\n      draggable: true,\n      onDragStart: e => onDragStart(e, type),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-type-icon\",\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-type-label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"insert-button\",\n      onClick: () => onInsert(type),\n      title: `Insert ${label} node`,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * NodesPanel component - extensible panel for all available node types\r\n * Currently supports Message nodes, but designed to easily add more types\r\n */\n_c = NodeType;\nconst NodesPanel = ({\n  onDragStart,\n  onInsertNode\n}) => {\n  // Define all available node types - easily extensible\n  const nodeTypes = [{\n    type: \"textNode\",\n    label: \"Text Message\",\n    icon: \"üí¨\"\n  }, {\n    type: \"imageNode\",\n    label: \"Image Message\",\n    icon: \"üì∑\"\n  }\n  // Future node types can be added here:\n  // {\n  //   type: \"videoNode\",\n  //   label: \"Video Message\",\n  //   icon: \"üé•\",\n  // },\n  // {\n  //   type: \"audioNode\",\n  //   label: \"Audio Message\",\n  //   icon: \"üéµ\",\n  // },\n  // {\n  //   type: \"conditionNode\",\n  //   label: \"Condition\",\n  //   icon: \"‚ùì\",\n  // },\n  // {\n  //   type: \"apiNode\",\n  //   label: \"API Call\",\n  //   icon: \"üîó\",\n  // }\n  ];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nodes-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"nodes-panel-title\",\n      children: \"Nodes Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nodes-panel-content\",\n      children: nodeTypes.map(nodeType => /*#__PURE__*/_jsxDEV(NodeType, {\n        type: nodeType.type,\n        label: nodeType.label,\n        icon: nodeType.icon,\n        onDragStart: onDragStart,\n        onInsert: onInsertNode\n      }, nodeType.type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_c2 = NodesPanel;\nexport default NodesPanel;\nvar _c, _c2;\n$RefreshReg$(_c, \"NodeType\");\n$RefreshReg$(_c2, \"NodesPanel\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","NodeType","type","label","icon","onDragStart","onInsert","className","children","draggable","e","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","_c","NodesPanel","onInsertNode","nodeTypes","map","nodeType","_c2","$RefreshReg$"],"sources":["D:/XXXX/src/components/NodesPanel.js"],"sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * NodeType component represents a draggable node type in the nodes panel\r\n * This makes it easy to add new node types in the future\r\n */\r\nconst NodeType = ({ type, label, icon, onDragStart, onInsert }) => {\r\n  return (\r\n    <div className=\"node-type-container\">\r\n      <div\r\n        className=\"node-type\"\r\n        draggable\r\n        onDragStart={(e) => onDragStart(e, type)}>\r\n        <div className=\"node-type-icon\">{icon}</div>\r\n        <div className=\"node-type-label\">{label}</div>\r\n      </div>\r\n      <button\r\n        className=\"insert-button\"\r\n        onClick={() => onInsert(type)}\r\n        title={`Insert ${label} node`}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * NodesPanel component - extensible panel for all available node types\r\n * Currently supports Message nodes, but designed to easily add more types\r\n */\r\nconst NodesPanel = ({ onDragStart, onInsertNode }) => {\r\n  // Define all available node types - easily extensible\r\n  const nodeTypes = [\r\n    {\r\n      type: \"textNode\",\r\n      label: \"Text Message\",\r\n      icon: \"üí¨\",\r\n    },\r\n    {\r\n      type: \"imageNode\",\r\n      label: \"Image Message\",\r\n      icon: \"üì∑\",\r\n    },\r\n    // Future node types can be added here:\r\n    // {\r\n    //   type: \"videoNode\",\r\n    //   label: \"Video Message\",\r\n    //   icon: \"üé•\",\r\n    // },\r\n    // {\r\n    //   type: \"audioNode\",\r\n    //   label: \"Audio Message\",\r\n    //   icon: \"üéµ\",\r\n    // },\r\n    // {\r\n    //   type: \"conditionNode\",\r\n    //   label: \"Condition\",\r\n    //   icon: \"‚ùì\",\r\n    // },\r\n    // {\r\n    //   type: \"apiNode\",\r\n    //   label: \"API Call\",\r\n    //   icon: \"üîó\",\r\n    // }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"nodes-panel\">\r\n      <h3 className=\"nodes-panel-title\">Nodes Panel</h3>\r\n      <div className=\"nodes-panel-content\">\r\n        {nodeTypes.map((nodeType) => (\r\n          <NodeType\r\n            key={nodeType.type}\r\n            type={nodeType.type}\r\n            label={nodeType.label}\r\n            icon={nodeType.icon}\r\n            onDragStart={onDragStart}\r\n            onInsert={onInsertNode}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodesPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}